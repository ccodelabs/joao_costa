{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","width","height","dashAddress","sendTxUrl","modalStyle","overlay","transform","transformOrigin","position","top","modal","minWidth","App","props","state","loading","success","failed","dashQrCodeDisplay","dashAm","playSuccess","playFailed","playTx","playClick","generated","generateEverything","address","window","localStorage","getItem","privKey","DashCore","PrivateKey","toAddress","setItem","toString","totalRows","totalColumns","table","i","push","this","generateFirstRow","generateRow","Table","style","rowNumber","totalCells","generateCell","key","columnNumber","collSpan","colSpan","Button","variant","onClick","buttonClicked","bind","src","objectFit","textAlign","txId","desired","x","y","options","method","uri","json","resolveWithFullResponse","simple","request","httpReqTx","statusCode","index","body","vout","outTx","scriptPubKey","addresses","n","console","log","lastTx","amount","outputIndex","scriptHex","hex","fromAddress","vin","addr","sendRequest","cancelTransaction","setState","getDashQrCode","qrCode","socketInterval","setInterval","scanQrTimeout","socket","io","on","emit","data","txlock","Math","round","txReceived","txid","eur","getDashForEuro","disconnect","clearInterval","response","length","price","floor","parseFloat","utxo","transaction","Transaction","from","to","sign","fee","serializedTx","serialize","rawtx","refundTxId","value","size","callUrl","timeout","promise","interval","abort","vendFailed","arr","split","arr2","vendSuccess","className","url","playStatus","Sound","status","PLAYING","STOPPED","onFinishedPlaying","open","styles","center","onClose","focusTrapped","showCloseIcon","ProgressBar","animated","now","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1239eaa2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Row from \"react-bootstrap/es/Row\";\nimport Button from \"react-bootstrap/es/Button\";\nimport Col from \"react-bootstrap/es/Col\";\nimport Container from \"react-bootstrap/es/Container\";\nimport Table from \"react-bootstrap/es/Table\";\nimport ProgressBar from \"react-bootstrap/es/ProgressBar\";\nimport request from \"request-promise-native\";\nimport Modal from \"react-responsive-modal\";\nimport QRCode from \"qrcode.react\";\nimport Sound from 'react-sound';\nimport DashCore from '@dashevo/dashcore-lib'\nimport {optionalCallExpression} from \"@babel/types\";\n\nconst failSound = './fail-sound-effect.mp3';\nconst successSound = './sound-effect-tada.mp3';\nconst transactionSound = './txIn.mp3';\nconst clickSound = './clickSound.wav';\n\nconst width = 9;\nconst height = 5;\n\nconst callUrl = \"http://192.168.1.102/process_donation.bin\";\nconst dashAddress = \"Xbkt2mnNaKPQw1XEZknfTsnvN8bjZTgTHm\";\nconst label = \"Dash+For+Beer\";\nconst dashGetRateUrl = \"https://rates2.dashretail.org/rates?source=dashretail&symbol=dasheur\";\nconst sendTxUrl = \"https://insight.dash.org/insight-api/tx/send\";\nconst getTxUrl = \"https://insight.dash.org/insight-api/tx/\";\n\nconst baseTxCheck = \"https://blockchair.com/dash/transaction/\";\n\nconst beerPrice = 0.01;\n\nconst eventToListenTo = 'txlock';\nconst room = 'inv';\n\nconst scanQrTimeout = 60;\n\nconst modalStyle = {\n    overlay: {\n        transform: \"rotate(90deg)\",\n        transformOrigin:\"bottom left\",\n        position:\"absolute\",\n        top:\"-100vw\",\n\n        height:\"100vw\",\n        width:\"100vh\",\n    },\n    modal: {\n        minWidth: '300px',\n        width: '500px'\n    }\n};\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        loading: false,\n        success: null,\n        failed: null,\n        dashQrCodeDisplay: null,\n        dashAm: null,\n        playSuccess: false,\n        playFailed: false,\n        playTx: false,\n        playClick: false,\n    }\n    this.generated = this.generateEverything(height,width);\n\n    this.address = window.localStorage.getItem(\"address\");\n    this.privKey = window.localStorage.getItem(\"privKey\")!=null ? new DashCore.PrivateKey(window.localStorage.getItem(\"privKey\")) : null;\n\n    if(this.address==null || this.privKey==null) {\n        //Generate a new one\n        this.privKey = new DashCore.PrivateKey();\n        this.address = this.privKey.toAddress();\n\n        window.localStorage.setItem(\"address\",this.address.toString());\n        window.localStorage.setItem(\"privKey\",this.privKey.toString());\n    }\n\n  }\n\n  generateEverything(totalRows, totalColumns) {\n    const table = [];\n    for(let i=0;i<totalRows;i++) {\n        if(i==0) {\n            table.push(this.generateFirstRow(i, totalColumns));\n        } else {\n            table.push(this.generateRow(i, totalColumns));\n        }\n    }\n    return (\n        <Table style={{\n            height: \"100%\"\n        }}>\n          <tbody>\n            {table}\n          </tbody>\n        </Table>\n    )\n  }\n\n  generateFirstRow(rowNumber, totalCells) {\n      const table = [];\n      table.push(this.generateCell(rowNumber, -1, 2));\n      table.push(this.generateCell(rowNumber, 1, 2));\n      table.push(this.generateCell(rowNumber, 3, 1));\n      table.push(this.generateCell(rowNumber, 5, 2));\n      table.push(this.generateCell(rowNumber, 7, 2));\n      return (\n          <tr key={\"row\"+rowNumber}>\n              {table}\n          </tr>\n      )\n  }\n\n  generateRow(rowNumber, totalCells) {\n    const table = [];\n    for(let i=0;i<totalCells;i++) {\n      table.push(this.generateCell(rowNumber, i, 1));\n    }\n    return (\n      <tr key={\"row\"+rowNumber}>\n        {table}\n      </tr>\n    );\n  }\n\n  generateCell(rowNumber, columnNumber, collSpan) {\n    return (\n        <th key={\"cell\"+rowNumber+\"-\"+columnNumber} colSpan={collSpan}>\n          <Button variant=\"light\" onClick={() => {\n            this.buttonClicked.bind(this)(rowNumber, columnNumber);\n          }} style={{\n              height: \"140px\"\n          }}>\n            <img src=\"https://morebeer-web-8-pavinthewaysoftw.netdna-ssl.com/product_image/morebeer/500x500/27498.png\" style={{\n              width: \"100%\",\n              height: \"100%\",\n                objectFit: \"contain\"\n            }}/>\n          </Button>\n            <p style={{\n                textAlign: \"center\"\n            }}>{beerPrice} €</p>\n        </th>\n    );\n  }\n\n  async txReceived(txId, desired, x, y) {\n      const options = {\n          method: 'GET',\n          uri: getTxUrl+txId,\n          json: true,\n          resolveWithFullResponse: true,\n          simple: false\n      };\n\n      const httpReqTx = await request(options);\n\n      if(httpReqTx.statusCode!=200) {\n          //failed\n          return;\n      }\n\n      let index = -1;\n      for(const outTx of httpReqTx.body.vout) {\n          if(outTx.scriptPubKey!=null && outTx.scriptPubKey.addresses!=null) {\n              for(const address of outTx.scriptPubKey.addresses) {\n                  if(address==this.address) {\n                      //Found!\n                      index = outTx.n;\n                      break;\n                  }\n              }\n          }\n      }\n\n      if(index===-1) {\n          //Error\n          return;\n      }\n\n      console.log(\"Response from GET: \",httpReqTx.body);\n\n      console.log(\"PAID!\");\n      this.lastTx = {\n          txId: txId,\n          amount: desired,\n          outputIndex: index,\n          scriptHex: httpReqTx.body.vout[index].scriptPubKey.hex,\n          fromAddress: httpReqTx.body.vin[0].addr\n      };\n      this.sendRequest(x, y);\n      this.cancelTransaction();\n      this.setState({\n          playTx: true,\n          loading: true,\n          success: null,\n          failed: null\n      });\n  }\n\n  async buttonClicked(x, y) {\n      if(this.state.loading) return;\n      console.log(\"Clicked \"+x+\" \"+y);\n      this.setState({\n          playClick: true\n      })\n      const qrCode = await this.getDashQrCode(beerPrice);\n      if(qrCode==null) {\n          this.setState({\n              loading: false,\n              success: null,\n              failed: \"Cannot fetch the exchange rate of DASH :(\",\n              dashQrCodeDisplay: null\n          });\n          return;\n      }\n\n      this.socketInterval = setInterval(() => {\n          this.cancelTransaction();\n      },scanQrTimeout*1000);\n\n      this.socket = window.io(\"http://insight.dash.org/\");\n      this.socket.on('connect', function() {\n          // Join the room.\n          console.log(\"Connected to DASH network\");\n          this.socket.emit('subscribe', room);\n      }.bind(this))\n      this.socket.on(eventToListenTo, function(data) {\n          if (data.txlock) {\n              console.log(\"New InstantSend transaction received: \", data)\n              if(data.vout!=null) {\n                  for(const outTx of data.vout) {\n                      const desired = Math.round(qrCode.amount*100000000);\n                      console.log(\"OUT TX: \", outTx[dashAddress]);\n                      console.log(\"Desired TX: \", desired);\n                      if(outTx[this.address]===desired) {\n                          this.txReceived(data.txid, desired, x , y);\n                          return;\n                      }\n                  }\n              }\n          } else {\n              console.log(\"New transaction received: \", data)\n          }\n\n      }.bind(this))\n\n      this.setState({\n          loading: false,\n          success: null,\n          failed: null,\n          dashQrCodeDisplay: qrCode.qrCode,\n          dashAm: qrCode.amount\n      })\n\n      //this.sendRequest(x,y);\n      /*this.setState({\n        loading: true,\n        success: null,\n        failed: null\n      })*/\n  }\n\n  async getDashQrCode(eur) {\n        const amount = await this.getDashForEuro(eur);\n        if(amount==null) {\n            return null;\n        }\n        return {\n            qrCode: \"dash:\"+this.address.toString()+\"?amount=\"+amount+\"&label=\"+label,\n            amount: amount\n        };\n  }\n\n  cancelTransaction() {\n        this.setState({\n            dashQrCodeDisplay: null\n        });\n        this.socket.disconnect();\n        clearInterval(this.socketInterval);\n        //console.log();\n  }\n\n  async getDashForEuro(eur) {\n      const options = {\n          method: 'GET',\n          uri: dashGetRateUrl,\n          json: true,\n          resolveWithFullResponse: true,\n          simple: false\n      };\n\n      const response = await request(options);\n\n      console.log(\"response body: \", response.body);\n\n      if(response.statusCode!=200 || response.body==null || response.body.length==0 || response.body[0]==null || response.body[0].price==null) {\n          console.log(\"Error fetching exchange rate of DASH\");\n          return null;\n      }\n\n      return Math.floor(eur/parseFloat(response.body[0].price)*100000000)/100000000;\n\n  }\n\n  async vendSuccess() {\n      if(this.lastTx!=null) {\n          //Send the transaction\n          const utxo = {\n              \"txId\" : this.lastTx.txId,\n              \"outputIndex\" : this.lastTx.outputIndex,\n              \"address\" : this.address,\n              \"script\" : this.lastTx.scriptHex,\n              \"satoshis\" : this.lastTx.amount\n          };\n\n          console.log(\"UTXO created: \",utxo);\n\n          const transaction = new DashCore.Transaction()\n              .from(utxo)\n              .to(dashAddress, this.lastTx.amount-200)\n              .sign(this.privKey)\n              .fee(200);\n\n          const serializedTx = transaction.serialize();\n\n          const options = {\n              method: 'POST',\n              uri: sendTxUrl,\n              body: {\n                  rawtx: serializedTx\n              },\n              json: true,\n              resolveWithFullResponse: true,\n              simple: false\n          };\n\n          const response = await request(options);\n\n          console.log(\"Response body: \", response.body);\n          console.log(\"Status code: \", response.statusCode);\n\n          if(response.statusCode===200) {\n              //Success\n          }\n      }\n      this.setState({\n          playSuccess: true,\n          loading: false,\n          success: \"Here's your beer :)\"\n      });\n      return;\n  }\n\n  async vendFailed() {\n      let refundTxId = null;\n      if(this.lastTx!=null) {\n          //Send the transaction\n          const utxo = {\n              \"txId\" : this.lastTx.txId,\n              \"outputIndex\" : this.lastTx.outputIndex,\n              \"address\" : this.address,\n              \"script\" : this.lastTx.scriptHex,\n              \"satoshis\" : this.lastTx.amount\n          };\n\n          console.log(\"UTXO created: \",utxo);\n\n          const transaction = new DashCore.Transaction()\n              .from(utxo)\n              .to(this.lastTx.fromAddress, this.lastTx.amount-200)\n              .sign(this.privKey)\n              .fee(200);\n\n          console.log(\"TX created\");\n\n          const serializedTx = transaction.toString();\n\n          console.log(\"TX serialize: \",serializedTx);\n\n          const options = {\n              method: 'POST',\n              uri: sendTxUrl,\n              body: {\n                  rawtx: serializedTx\n              },\n              json: true,\n              resolveWithFullResponse: true,\n              simple: false\n          };\n\n          const response = await request(options);\n\n          console.log(\"Response body: \", response.body);\n          console.log(\"Status code: \", response.statusCode);\n\n          if(response.statusCode===200) {\n              //Success\n              refundTxId = response.body.txid;\n          }\n      }\n      this.setState({\n          playFailed: true,\n          loading: false,\n          failed: (\n              <p>\n                  We are really sorry, something didn't go well. Don't worry, your transaction has been refunded, you can check the status here:<br/>\n                  <div style={{\n                      textAlign: \"center\"\n                  }}>\n                      <QRCode  value={baseTxCheck+refundTxId} size={256}/>\n                  </div>\n              </p>\n          )\n      });\n  }\n\n  async sendRequest(x,y) {\n    const options = {\n        method: 'GET',\n        uri: callUrl+\"?x=\"+(y+1)+\"&y=\"+(5-x),\n        json: true,\n        resolveWithFullResponse: true,\n        simple: false,\n        timeout: 10\n    };\n\n    const promise = request(options);\n    const interval = setInterval(() => {\n        promise.abort();\n        this.vendFailed();\n        clearInterval(interval);\n    },10000);\n    const response = await promise;\n    clearInterval(interval);\n\n    if(response.statusCode===200) {\n        //Success\n        //Split the newlines\n        console.log(response.body);\n        const arr = response.body.split(\"\\n\");\n        if(arr.length>1) {\n            //Ok\n            console.log(\"ARR: \"+arr[1]);\n            const arr2 = arr[1].split(\":\");\n            if(arr2.length>1) {\n                console.log(\"ARR21: \"+arr2[0]);\n                console.log(\"ARR22: \"+arr2[1]);\n                if(arr2[0]==\"message\" && arr2[1]==\"SUCCESS\") {\n                    //Success operation\n                    this.vendSuccess();\n                    return;\n                }\n            }\n        }\n        //Failed\n        this.vendFailed();\n        return;\n    }\n  }\n\n  render() {\n    return (\n        <div className={\"wrapper\"}>\n          <div style={{\n                width: \"100%\",\n              height: \"100%\"\n          }}>\n\n              <Sound\n                  url={transactionSound}\n                  playStatus={this.state.playTx ? Sound.status.PLAYING : Sound.status.STOPPED}\n                  onFinishedPlaying={() => {\n                      this.setState({\n                          playTx: false\n                      })\n                  }}\n              />\n              <Sound\n                  url={successSound}\n                  playStatus={this.state.playSuccess ? Sound.status.PLAYING : Sound.status.STOPPED}\n                  onFinishedPlaying={() => {\n                      this.setState({\n                          playSuccess: false\n                      })\n                  }}\n              />\n              <Sound\n                  url={failSound}\n                  playStatus={this.state.playFailed ? Sound.status.PLAYING : Sound.status.STOPPED}\n                  onFinishedPlaying={() => {\n                      this.setState({\n                          playFailed: false\n                      })\n                  }}\n              />\n              <Sound\n                  url={clickSound}\n                  playStatus={this.state.playClick ? Sound.status.PLAYING : Sound.status.STOPPED}\n                  onFinishedPlaying={() => {\n                      this.setState({\n                          playClick: false\n                      })\n                  }}\n              />\n\n              <Modal open={this.state.failed!=null}\n                     styles={modalStyle}\n                     center\n                     onClose={()=>{this.setState({\n                         failed: null\n                     })}}\n                     focusTrapped={false}>\n                  <h2>Failed!</h2>\n                  <p>{this.state.failed}</p>\n              </Modal>\n\n              <Modal open={this.state.success!=null}\n                     styles={modalStyle}\n                     center\n                     onClose={()=>{this.setState({\n                         success: null\n                     })}}\n                     focusTrapped={false}>\n                  <h2>Success!</h2>\n                  <p>{this.state.success}</p>\n              </Modal>\n\n              <Modal open={this.state.loading}\n                   styles={modalStyle}\n                   center\n                     showCloseIcon={false}\n                   onClose={()=>{}}\n                   focusTrapped={false}>\n                  <h2>Processing...</h2>\n                  <p>Dispensing your beer, please wait! :)</p>\n                  <ProgressBar animated  now={100}/>\n              </Modal>\n\n              <Modal open={this.state.dashQrCodeDisplay!=null}\n                     styles={modalStyle}\n                     center\n                     onClose={this.cancelTransaction.bind(this)}\n                     focusTrapped={false}>\n                  <h2 style={{\n                      textAlign: \"center\"\n                  }}>Please scan the QR code!</h2>\n                  <div style={{\n                      textAlign: \"center\"\n                  }}>\n                      <QRCode value={this.state.dashQrCodeDisplay!=null ? this.state.dashQrCodeDisplay : \"\"} size={256} />\n                  </div>\n                  <h3 style={{\n                      textAlign: \"center\"\n                  }}>{this.state.dashAm} DASH</h3>\n              </Modal>\n\n            {this.generated}\n          </div>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}