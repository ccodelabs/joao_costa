{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","width","height","App","props","state","loading","success","failed","generated","generateEverything","totalRows","totalColumns","table","i","push","this","generateFirstRow","generateRow","Table","style","rowNumber","totalCells","generateCell","key","columnNumber","collSpan","colSpan","Button","variant","onClick","buttonClicked","src","objectFit","x","y","console","log","sendRequest","setState","options","method","uri","callUrl","json","resolveWithFullResponse","simple","request","response","statusCode","body","arr","split","length","arr2","className","open","styles","modal","minWidth","showCloseIcon","onClose","focusTrapped","ProgressBar","animated","now","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a963a920.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Row from \"react-bootstrap/es/Row\";\nimport Button from \"react-bootstrap/es/Button\";\nimport Col from \"react-bootstrap/es/Col\";\nimport Container from \"react-bootstrap/es/Container\";\nimport Table from \"react-bootstrap/es/Table\";\nimport ProgressBar from \"react-bootstrap/es/ProgressBar\";\nimport Modal from 'react-responsive-modal';\nimport request from \"request-promise-native\";\n\nconst width = 9;\nconst height = 5;\n\nconst callUrl = \"http://192.168.1.102/process_donation.bin\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      success: null,\n      failed: null\n    }\n    this.generated = this.generateEverything(height,width);\n  }\n\n  generateEverything(totalRows, totalColumns) {\n    const table = [];\n    for(let i=0;i<totalRows;i++) {\n        if(i==0) {\n            table.push(this.generateFirstRow(i, totalColumns));\n        } else {\n            table.push(this.generateRow(i, totalColumns));\n        }\n    }\n    return (\n        <Table style={{\n            height: \"100%\"\n        }}>\n          <tbody>\n            {table}\n          </tbody>\n        </Table>\n    )\n  }\n\n  generateFirstRow(rowNumber, totalCells) {\n      const table = [];\n      table.push(this.generateCell(rowNumber, -1, 2));\n      table.push(this.generateCell(rowNumber, 1, 2));\n      table.push(this.generateCell(rowNumber, 3, 1));\n      table.push(this.generateCell(rowNumber, 5, 2));\n      table.push(this.generateCell(rowNumber, 7, 2));\n      return (\n          <tr key={\"row\"+rowNumber}>\n              {table}\n          </tr>\n      )\n  }\n\n  generateRow(rowNumber, totalCells) {\n    const table = [];\n    for(let i=0;i<totalCells;i++) {\n      table.push(this.generateCell(rowNumber, i, 1));\n    }\n    return (\n      <tr key={\"row\"+rowNumber}>\n        {table}\n      </tr>\n    );\n  }\n\n  generateCell(rowNumber, columnNumber, collSpan) {\n    return (\n        <th key={\"cell\"+rowNumber+\"-\"+columnNumber} colSpan={collSpan}>\n          <Button variant=\"light\" onClick={() => {\n            this.buttonClicked(rowNumber, columnNumber);\n          }} style={{\n              height: \"140px\"\n          }}>\n            <img src=\"https://morebeer-web-8-pavinthewaysoftw.netdna-ssl.com/product_image/morebeer/500x500/27498.png\" style={{\n              width: \"100%\",\n              height: \"100%\",\n                objectFit: \"contain\"\n            }}/>\n          </Button>\n        </th>\n    );\n  }\n\n  buttonClicked(x, y) {\n      if(this.state.loading) return;\n      console.log(\"Clicked \"+x+\" \"+y);\n      this.sendRequest(x,y);\n      this.setState({\n        loading: true,\n        success: null,\n        failed: null\n      })\n  }\n\n  async sendRequest(x,y) {\n    const options = {\n      method: 'GET',\n      uri: callUrl+\"?x=\"+(y+1)+\"&y=\"+(5-x),\n      json: true,\n      resolveWithFullResponse: true,\n      simple: false\n    };\n\n    const response = await request(options);\n\n    if(response.statusCode===200) {\n        //Success\n        //Split the newlines\n        console.log(response.body);\n        const arr = response.body.split(\"\\n\");\n        if(arr.length>1) {\n            //Ok\n            console.log(\"ARR: \"+arr[1]);\n            const arr2 = arr[1].split(\":\");\n            if(arr2.length>1) {\n                console.log(\"ARR21: \"+arr2[0]);\n                console.log(\"ARR22: \"+arr2[1]);\n                if(arr2[0]==\"message\" && arr2[1]==\"SUCCESS\") {\n                    this.setState({\n                        loading: false,\n                        success: \"Here's your beer :)\"\n                    });\n                }\n                return;\n            }\n        }\n        this.setState({\n            loading: false,\n            success: \"Dispense failed :(\"\n        });\n        return;\n    }\n  }\n\n  render() {\n    return (\n        <div className={\"wrapper\"}>\n          <div style={{\n                width: \"100%\",\n              height: \"100%\"\n          }}>\n\n            <Modal open={this.state.loading}\n                   styles={{\n                     modal: {\n                       minWidth: '200px',\n                       width: '400px'\n                     }\n                   }}\n                   showCloseIcon={false}\n                   onClose={()=>{}}\n                   focusTrapped={false}>\n              <h2>Processing...</h2>\n              <p>Dispensing your beer, please wait! :)</p>\n              <ProgressBar animated  now={100}/>\n            </Modal>\n\n            {this.generated}\n          </div>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}